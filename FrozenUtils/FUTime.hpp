/*
 * @Author: Frozen (https://github.com/AlterFrozen)
 * @Date: 2022-09-28 21:20:31
 * @LastEditTime: 2022-09-28 21:23:17
 * @LastEditors: Please set LastEditors
 * @Description: A collection of time functions (C++20)

███████╗██████╗  ██████╗ ███████╗███████╗███╗   ██╗    ██╗   ██╗████████╗██╗██╗     ███████╗
██╔════╝██╔══██╗██╔═══██╗╚══███╔╝██╔════╝████╗  ██║    ██║   ██║╚══██╔══╝██║██║     ██╔════╝
█████╗  ██████╔╝██║   ██║  ███╔╝ █████╗  ██╔██╗ ██║    ██║   ██║   ██║   ██║██║     ███████╗
██╔══╝  ██╔══██╗██║   ██║ ███╔╝  ██╔══╝  ██║╚██╗██║    ██║   ██║   ██║   ██║██║     ╚════██║
██║     ██║  ██║╚██████╔╝███████╗███████╗██║ ╚████║    ╚██████╔╝   ██║   ██║███████╗███████║
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═══╝     ╚═════╝    ╚═╝   ╚═╝╚══════╝╚══════╝                                                                                          

[Logo Generated By]>> http://patorjk.com/software/taag/ 
*/

#ifndef _FUTIME_HPP_
#define _FUTIME_HPP_

#include <chrono>

namespace FU
{
    /**
     * Count the duration after last call of "getDuration_xxx"
     */  
    class LoopTimer
    {
    public:
        LoopTimer():currentTime{std::chrono::high_resolution_clock::now()}{};
        LoopTimer(const LoopTimer& copy) = delete;
        LoopTimer& operator=(const LoopTimer& another) = delete;

    public:
        float getDuration_sec() 
        { 
            auto samplingPoint = std::chrono::high_resolution_clock::now();
            float duration = std::chrono::duration<float, std::chrono::seconds::period>(samplingPoint - this->currentTime).count();
            this->currentTime = samplingPoint;
            return duration;
        }
    private:
        std::chrono::steady_clock::time_point currentTime;
    };
}// namespace FU

#endif