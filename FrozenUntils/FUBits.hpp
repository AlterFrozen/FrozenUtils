/*
 * @Author: Frozen (https://github.com/AlterFrozen)
 * @Date: 2022-09-12 17:07:31
 * @LastEditTime: 2022-09-12 19:17:45
 * @LastEditors: Please set LastEditors
 * @Description: A collection of bitwise operation functions (C++20)

███████╗██████╗  ██████╗ ███████╗███████╗███╗   ██╗    ██╗   ██╗███╗   ██╗████████╗██╗██╗     ███████╗
██╔════╝██╔══██╗██╔═══██╗╚══███╔╝██╔════╝████╗  ██║    ██║   ██║████╗  ██║╚══██╔══╝██║██║     ██╔════╝
█████╗  ██████╔╝██║   ██║  ███╔╝ █████╗  ██╔██╗ ██║    ██║   ██║██╔██╗ ██║   ██║   ██║██║     ███████╗
██╔══╝  ██╔══██╗██║   ██║ ███╔╝  ██╔══╝  ██║╚██╗██║    ██║   ██║██║╚██╗██║   ██║   ██║██║     ╚════██║
██║     ██║  ██║╚██████╔╝███████╗███████╗██║ ╚████║    ╚██████╔╝██║ ╚████║   ██║   ██║███████╗███████║
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═══╝     ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝╚══════╝╚══════╝

[Logo Generated By]>> http://patorjk.com/software/taag/ 
*/

#ifndef _FUBITS_HPP_
#define _FUBITS_HPP_

#include <cassert>
#include <concepts>

namespace FU
{
    /**
     * Returns the lowest 1-bit of num
     * @param {int} num
     * @return {int} The lowest 1-bit of num
     */
    template<std::integral T>
    int lowestOneBit(T num) 
    {
        return num & (~num + 1);
    }

    /**
     * Returns the number of leading 0-bits in num, starting at the most significant bit position. If num is 0, the result is undefined.
     * @param {int} num
     * @return {int} The number of leading 0-bits in num
     */    
    int leadingZeroBits(unsigned int num)
    {
        assert(num != 0 && "leadingZeroBits()>> The result is undefined when num is 0!");
        return __builtin_clz(num);
    }

    /**
     * Returns the number of trailing 0-bits in num, starting at the least significant bit position. If num is 0, the result is undefined.
     * @param {int} num
     * @return {int} The number of trailing 0-bits in num
     */    
    int trailingZeroBits(unsigned int num)
    {
        assert(num != 0 && "trailingZeroBits()>> The result is undefined when num is 0!");
        return __builtin_ctz(num);
    }

    /**
     * Returns the number of 1-bits in num.
     * @param {unsigned int} num
     * @return {int} the number of 1-bits in num.
     */    
    int countOneBits(unsigned int num)
    {
        return __builtin_popcount(num);
    }
}

#endif